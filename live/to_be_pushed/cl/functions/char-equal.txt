======Function CHAR=, CHAR/=, CHAR<, CHAR>, CHAR<=, CHAR>=, CHAR-EQUAL, CHAR-NOT-EQUAL, CHAR-LESSP, CHAR-GREATERP, CHAR-NOT-GREATERP, CHAR-NOT-LESSP======
These predicates compare //[[CL:Glossary:character|characters]]//.

**char=** returns //[[CL:Glossary:true]]// if all //characters// are the //[[CL:Glossary:same]]//; otherwise, it returns //[[CL:Glossary:false]]//.

If two //characters// differ in any //[[CL:Glossary:implementation-defined]]// //[[CL:Glossary:attribute|attributes]]//, then they are not **char=**.

**char/=** returns //[[CL:Glossary:true]]// if all //characters// are different; otherwise, it returns //[[CL:Glossary:false]]//.

**char<** returns //[[CL:Glossary:true]]// if the //characters// are monotonically increasing; otherwise, it returns //[[CL:Glossary:false]]//.

If two //[[CL:Glossary:character|characters]]// have //[[CL:Glossary:identical]]// //[[CL:Glossary:implementation-defined]]// //[[CL:Glossary:attribute|attributes]]//, then their ordering by **char<** is consistent with the numerical ordering by the predicate ''<'' on their //[[CL:Glossary:codes]]//.

**char>** returns //[[CL:Glossary:true]]// if the //characters// are monotonically decreasing; otherwise, it returns //[[CL:Glossary:false]]//.

If two //[[CL:Glossary:character|characters]]// have //[[CL:Glossary:identical]]// //[[CL:Glossary:implementation-defined]]// //[[CL:Glossary:attribute|attributes]]//, then their ordering by **char>** is consistent with the numerical ordering by the predicate ''>'' on their //[[CL:Glossary:codes]]//.

**char<=** returns //[[CL:Glossary:true]]// if the //characters// are monotonically nondecreasing; otherwise, it returns //[[CL:Glossary:false]]//.

If two //[[CL:Glossary:character|characters]]// have //[[CL:Glossary:identical]]// //[[CL:Glossary:implementation-defined]]// //[[CL:Glossary:attribute|attributes]]//, then their ordering by **char<=** is consistent with the numerical ordering by the predicate ''<='' on their //[[CL:Glossary:codes]]//.

**char>=** returns //[[CL:Glossary:true]]// if the //characters// are monotonically nonincreasing; otherwise, it returns //[[CL:Glossary:false]]//.

If two //[[CL:Glossary:character|characters]]// have //[[CL:Glossary:identical]]// //[[CL:Glossary:implementation-defined]]// //[[CL:Glossary:attribute|attributes]]//, then their ordering by **char>=** is consistent with the numerical ordering by the predicate ''>='' on their //[[CL:Glossary:codes]]//.

**char-equal**, **char-not-equal**, **char-lessp**, **char-greaterp**, **char-not-greaterp**, and **char-not-lessp** are similar to **char=**, **char/=**, **char<**, **char>**, **char<=**, **char>=**, respectively, except that they ignore differences in //[[CL:Glossary:case]]// and might have an //[[CL:Glossary:implementation-defined]]// behavior for //[[CL:Glossary:non-simple]]// //[[CL:Glossary:character|characters]]//.

For example, an //[[CL:Glossary:implementation]]// might define that **char-equal**, etc. ignore certain //[[CL:Glossary:implementation-defined]]// //[[CL:Glossary:attribute|attributes]]//. The effect, if any, of each //[[CL:Glossary:implementation-defined]]// //[[CL:Glossary:attribute]]// upon these functions must be specified as part of the definition of that //[[CL:Glossary:attribute]]//.

====Syntax====
  * **char=** //''&rest'' characters''+''// → //generalized-boolean//
  * **char/=** //''&rest'' characters''+''// → //generalized-boolean//
  * **char<** //''&rest'' characters''+''// → //generalized-boolean//
  * **char>** //''&rest'' characters''+''// → //generalized-boolean//
  * **char<=** //''&rest'' characters''+''// → //generalized-boolean//
  * **char>=** //''&rest'' characters''+''// → //generalized-boolean//
  * **char-equal** //''&rest'' characters''+''// → //generalized-boolean//
  * **char-not-equal** //''&rest'' characters''+''// → //generalized-boolean//
  * **char-lessp** //''&rest'' characters''+''// → //generalized-boolean//
  * **char-greaterp** //''&rest'' characters''+''// → //generalized-boolean//
  * **char-not-greaterp** //''&rest'' characters''+''// → //generalized-boolean//
  * **char-not-lessp** //''&rest'' characters''+''// → //generalized-boolean//

====Arguments and Values====
  * //character// - a //[[CL:Glossary:character]]//.
  * //generalized-boolean// - a //[[CL:Glossary:generalized boolean]]//.

====Examples====
<blockquote>
(char= #\d #\d) → //[[CL:Glossary:true]]//
(char= #\A #\a) → //[[CL:Glossary:false]]//
(char= #\d #\x) → //[[CL:Glossary:false]]//
(char= #\d #\D) → //[[CL:Glossary:false]]//

(char/= #\d #\d) → //[[CL:Glossary:false]]//
(char/= #\d #\x) → //[[CL:Glossary:true]]//
(char/= #\d #\D) → //[[CL:Glossary:true]]//

(char= #\d #\d #\d #\d) → //[[CL:Glossary:true]]//
(char/= #\d #\d #\d #\d) → //[[CL:Glossary:false]]//
(char= #\d #\d #\x #\d) → //[[CL:Glossary:false]]//
(char/= #\d #\d #\x #\d) → //[[CL:Glossary:false]]//
(char= #\d #\y #\x #\c) → //[[CL:Glossary:false]]//
(char/= #\d #\y #\x #\c) → //[[CL:Glossary:true]]//
(char= #\d #\c #\d) → //[[CL:Glossary:false]]//
(char/= #\d #\c #\d) → //[[CL:Glossary:false]]//

(char< #\d #\x) → //[[CL:Glossary:true]]//
(char<= #\d #\x) → //[[CL:Glossary:true]]//
(char< #\d #\d) → //[[CL:Glossary:false]]//
(char<= #\d #\d) → //[[CL:Glossary:true]]//
(char< #\a #\e #\y #\z) → //[[CL:Glossary:true]]//
(char<= #\a #\e #\y #\z) → //[[CL:Glossary:true]]//
(char< #\a #\e #\e #\y) → //[[CL:Glossary:false]]//
(char<= #\a #\e #\e #\y) → //[[CL:Glossary:true]]//

(char> #\e #\d) → //[[CL:Glossary:true]]//
(char>= #\e #\d) → //[[CL:Glossary:true]]//
(char> #\d #\c #\b #\a) → //[[CL:Glossary:true]]//
(char>= #\d #\c #\b #\a) → //[[CL:Glossary:true]]//
(char> #\d #\d #\c #\a) → //[[CL:Glossary:false]]//
(char>= #\d #\d #\c #\a) → //[[CL:Glossary:true]]//
(char> #\e #\d #\b #\c #\a) → //[[CL:Glossary:false]]//
(char>= #\e #\d #\b #\c #\a) → //[[CL:Glossary:false]]//

(char> #\z #\A) → //[[CL:Glossary:implementation-dependent]]//
(char> #\Z #\a) → //[[CL:Glossary:implementation-dependent]]//

(char-equal #\A #\a) → //[[CL:Glossary:true]]//

([[CL:Functions:stable-sort]] ([[CL:Functions:list]] #\b #\A #\B #\a #\c #\C) #'char-lessp) → (#\A #\a #\b #\B #\c #\C) 
([[CL:Functions:stable-sort]] ([[CL:Functions:list]] #\b #\A #\B #\a #\c #\C) #'char<)
  → (#\A #\B #\C #\a #\b #\c) ;Implementation A 
  → (#\a #\b #\c #\A #\B #\C) ;Implementation B 
  → (#\a #\A #\b #\B #\c #\C) ;Implementation C
  → (#\A #\a #\B #\b #\C #\c) ;Implementation D
  → (#\A #\B #\a #\b #\C #\c) ;Implementation E 
</blockquote>

====Affected By====
None.

====Exceptional Situations====
Should signal an error of [[CL:Glossary:type]] [[CL:Errors:program-error]] if at least one //character// is not supplied.

====See Also====
{\secref\CharacterSyntax}, {\secref\ImplementationDefinedScripts}

====Notes====
If characters differ in their //[[CL:Glossary:code]]// //[[CL:Glossary:attribute]]// or any //[[CL:Glossary:implementation-defined]]// //[[CL:Glossary:attribute]]//, they are considered to be different by **char=**.

There is no requirement that ''([[CL:Functions:eq]] c1 c2)'' be true merely because ''(char= c1 c2)'' is //[[CL:Glossary:true]]//. While **[[CL:Functions:eq]]** can distinguish two //[[CL:Glossary:character|characters]]// that **char=** does not, it is distinguishing them not as //[[CL:Glossary:character|characters]]//, but in some sense on the basis of a lower level implementation characteristic. If ''([[CL:Functions:eq]] c1 c2)'' is //[[CL:Glossary:true]]//, then ''(char= c1 c2)'' is also true. **[[CL:Functions:eql]]** and **[[CL:Functions:equal]]** compare //[[CL:Glossary:character|characters]]// in the same way that **char=** does.

The manner in which //[[CL:Glossary:case]]// is used by **char-equal**, **char-not-equal**, **char-lessp**, **char-greaterp**, **char-not-greaterp**, and **char-not-lessp** implies an ordering for //[[CL:Glossary:standard characters]]// such that ''A=a'', ''B=b'', and so on, up to ''Z=z'', and furthermore either ''9<A'' or ''Z<0''.

\issue{CHARACTER-PROPOSAL:2-1-1} \issue{CHARACTER-PROPOSAL:2-1-1} \issue{CHARACTER-PROPOSAL:2-1-1} \issue{CHARACTER-PROPOSAL:2-1-1} \issue{CHARACTER-PROPOSAL:2-1-1} \issue{CHARACTER-PROPOSAL:2-1-1} \issue{CHARACTER-PROPOSAL:2-1-1}
